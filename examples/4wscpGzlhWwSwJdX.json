{
  "createdAt": "2025-07-14T19:41:17.348Z",
  "updatedAt": "2025-07-14T19:41:17.348Z",
  "id": "4wscpGzlhWwSwJdX",
  "name": "Enhance Customer Chat Buffer Messages with Twilio and Redis",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        780,
        80
      ],
      "typeVersion": 1,
      "id": "4275130d-4736-47c2-9103-5aec58e6c85e"
    },
    {
      "parameters": {},
      "id": "08e879c9-696d-41f4-9151-54c202a3cce1",
      "name": "No Operation, do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        -240,
        120
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "push",
        "list": "=chat-buffer:{{ $json.From }}",
        "messageData": "={{ $json.Body }}",
        "tail": true
      },
      "id": "75ed0a20-2a39-4720-872b-b552164db312",
      "name": "Add to Messages Stack",
      "type": "n8n-nodes-base.redis",
      "position": [
        -560,
        -200
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "ec39573f-f92a-4fe4-a832-0a137de8e7d0",
              "operator": {
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $('Get Latest Message Stack').item.json.messages.last() }}",
              "rightValue": "={{ $('Twilio Trigger').item.json.Body }}"
            }
          ]
        },
        "options": {}
      },
      "id": "21b1cb9c-43cd-409c-86e5-fd5cfe128d30",
      "name": "Should Continue?",
      "type": "n8n-nodes-base.if",
      "position": [
        -240,
        -40
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=chat-debouncer:{{ $('Twilio Trigger').item.json.From }}"
      },
      "id": "9e7d512e-97c5-40ec-8480-92a89c6db13c",
      "name": "Window Buffer Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        900,
        80
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "updates": [
          "com.twilio.messaging.inbound-message.received"
        ]
      },
      "id": "2c11f347-b6f3-4c81-8782-62364a7d42bc",
      "name": "Twilio Trigger",
      "type": "n8n-nodes-base.twilioTrigger",
      "position": [
        -960,
        -40
      ],
      "webhookId": "0ca3da0e-e4e1-4e94-8380-06207bf9b429",
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "messages",
        "key": "=chat-buffer:{{ $json.From }}",
        "keyType": "list",
        "options": {}
      },
      "id": "e5960cdd-7a48-4f16-820b-020ad3bd5eb3",
      "name": "Get Latest Message Stack",
      "type": "n8n-nodes-base.redis",
      "position": [
        -400,
        -40
      ],
      "typeVersion": 1,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "content": "## Step 2. Buffer Incoming Messages\n[Learn more about using Redis](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.redis)\n\n* New messages are captured into a list.\n* After X seconds, we get a fresh copy of this list\n* If the last message on the list is the same as the incoming message, then we know no new follow-on messages were sent within the last 5 seconds. Hence the user should be waiting and it is safe to reply.\n* But if the reverse is true, then we will abort the execution here.",
        "height": 766.7069233634998,
        "width": 632.8309394802918,
        "color": 7
      },
      "id": "cf711115-15f5-43f2-99df-df6a8da3d399",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -660,
        -460
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "from": "={{ $('Twilio Trigger').item.json.To }}",
        "to": "={{ $('Twilio Trigger').item.json.From }}",
        "message": "={{ $json.output }}",
        "options": {}
      },
      "id": "4e9fa2b3-f4c7-461e-8696-8d7b18a477df",
      "name": "Send Reply",
      "type": "n8n-nodes-base.twilio",
      "position": [
        1120,
        -80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "e0705918-78c7-4377-a514-5515c179b486",
      "name": "Wait 5 seconds",
      "type": "n8n-nodes-base.wait",
      "position": [
        -560,
        -40
      ],
      "webhookId": "d486979c-8074-4ecb-958e-fcb24455086b",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "options": {
          "groupMessages": true
        }
      },
      "id": "3f0c4024-7af1-4d82-895a-650157c320fa",
      "name": "Get Chat History",
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "position": [
        120,
        -120
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=chat-debouncer:{{ $('Twilio Trigger').item.json.From }}"
      },
      "id": "6027ffe0-2f6e-4ab9-b412-27cf0dcdf11d",
      "name": "Window Buffer Memory1",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        120,
        20
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "content": "## Step 1. Listen for Twilio Messages\n[Read more about Twilio Trigger](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.twiliotrigger)\n\nIn this example, we'll use the sender's phone number as the session ID. This will be important in retrieving chat history.",
        "height": 357.49804533541777,
        "width": 431.1629802181097,
        "color": 7
      },
      "id": "9d54b42c-1402-4cb8-8457-5005ef21f2bc",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1120,
        -220
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Step 3. Get Messages Since Last Reply\n[Read more about using Chat Memory](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.memorymanager)\n\nOnce conditions are met and we allow the agent to reply, we'll need to find the bot's last reply and work out the buffer of user messages since then. We can do this by looking using chat memory and comparing this to the latest message in our redis messages stack.",
        "height": 501.77420646931444,
        "width": 618.970917763344,
        "color": 7
      },
      "id": "3d3f7d4f-953c-4a58-a64e-82359edb9837",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        -320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "01434acb-c224-46d2-99b0-7a81a2bb50c5",
              "name": "messages",
              "type": "string",
              "value": "={{\n$('Get Latest Message Stack').item.json.messages\n  .slice(\n    $('Get Latest Message Stack').item.json.messages.lastIndexOf(\n      $('Get Chat History').item.json.messages.last().human\n      || $('Twilio Trigger').item.json.chatInput\n    ),\n    $('Get Latest Message Stack').item.json.messages.length\n  )\n  .join('\\n')\n}}"
            }
          ]
        },
        "options": {}
      },
      "id": "9ac3f33b-5939-4b7a-9c76-cbf920701e5c",
      "name": "Get Messages Buffer",
      "type": "n8n-nodes-base.set",
      "position": [
        440,
        -120
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "## Step 4. Send Single Agent Reply For Many Messages\n[Learn more about using AI Agents](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent)\n\nFinally, our buffered messages are sent to the AI Agent that can formulate a single response for all. This could potentially improve the conversation experience if the chat interaction is naturally more rapid and spontaneous. A drawback however is that responses could be feel much slower - tweak the wait threshold to suit your needs!",
        "height": 522.5993538768389,
        "width": 670.2274698011594,
        "color": 7
      },
      "id": "84332cd7-51f9-4f8a-9777-92af42936c34",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        660,
        -280
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Try It Out!\n### This workflow demonstrates a simple approach to stagger an AI Agent's reply if users often send in a sequence of partial messages and in short bursts.\n\n* Twilio webhook receives user's messages which are recorded in a message stack powered by Redis.\n* The execution is immediately paused for 5 seconds and then another check is done against the message stack for the latest message.\n* The purpose of this check lets use know if the user is sending more messages or if they are waiting for a reply.\n* The execution is aborted if the latest message on the stack differs from the incoming message and continues if they are the same.\n* For the latter, the agent receives buffered messages and is able to respond to all in a single reply.",
        "height": 486.69228315530853,
        "width": 375.55385425077225
      },
      "id": "56e2478b-9c8f-434b-b82a-1cd60b6a00f8",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1520,
        -320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "agent": "conversationalAgent",
        "promptType": "define",
        "text": "={{ $json.messages }}",
        "options": {}
      },
      "id": "f7828bd5-de4f-49fd-9a7a-80579caa982e",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        780,
        -80
      ],
      "typeVersion": 1.6
    }
  ],
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twilio Trigger": {
      "main": [
        [
          {
            "node": "Add to Messages Stack",
            "type": "main",
            "index": 0
          },
          {
            "node": "Wait 5 seconds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 5 seconds": {
      "main": [
        [
          {
            "node": "Get Latest Message Stack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Chat History": {
      "main": [
        [
          {
            "node": "Get Messages Buffer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Continue?": {
      "main": [
        [
          {
            "node": "Get Chat History",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get Messages Buffer": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory1": {
      "ai_memory": [
        [
          {
            "node": "Get Chat History",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Get Latest Message Stack": {
      "main": [
        [
          {
            "node": "Should Continue?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "2624d4b6-df91-46fc-9a93-bd506aaf89bf",
  "triggerCount": 0,
  "tags": [],
  "shared": [
    {
      "createdAt": "2025-10-25T12:28:46.019Z",
      "updatedAt": "2025-10-25T12:28:46.019Z",
      "role": "workflow:owner",
      "workflowId": "4wscpGzlhWwSwJdX",
      "projectId": "gRDCuWZgtIsQJhnE",
      "project": {
        "createdAt": "2025-10-25T12:28:30.681Z",
        "updatedAt": "2025-10-25T12:30:12.034Z",
        "id": "gRDCuWZgtIsQJhnE",
        "name": "Leonardo Sepúlveda <lsepulvedatabares@gmail.com>",
        "type": "personal",
        "icon": null,
        "description": null
      }
    }
  ]
}